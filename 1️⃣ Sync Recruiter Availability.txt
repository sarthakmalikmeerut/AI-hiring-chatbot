1️⃣ Sync Recruiter Availability
├── Recruiters manually input their available time slots via the Streamlit UI
├── Store recruiter time slots in st.session_state.recruiter_schedules
└── Move to the next step

2️⃣ Fetch Candidate Availability
├── Candidates manually input their available time slots via the Streamlit UI
├── Validate responses and store data in st.session_state.candidate_schedules
├── Once all candidate inputs are received, mark cand_finished = True
└── Move to the next step

3️⃣ Construct Bipartite Graph
├── Define two sets of nodes:
│ ├── Set 1: Recruiters
│ ├── Set 2: Candidates
├── Create edges based on overlapping time slots
├── If no valid matches are found, display a warning and stop execution
└── Move to the next step

4️⃣ Apply Bipartite Matching Algorithm
├── Use the Hopcroft-Karp Algorithm for maximum matching
├── Assign candidates to recruiters based on available slots
├── If all candidates are assigned, move to the next step
├── If some candidates remain unassigned, display a warning
└── Move to the next step

5️⃣ Greedy Scheduling for Time Slot Assignment
├── Sort available time slots for each recruiter
├── Assign the earliest available slot to each matched candidate
├── If a slot is available, assign it
├── If no slot is available, display a warning
└── Move to the next step

6️⃣ Display Final Schedule & Send Calendar Invites
├── Display the final schedule in a DataFrame
├── If a user clicks "Send Calendar Invites", trigger Google/Outlook API
├── Send invites to matched recruiters & candidates
├── Notify both parties via email
├── Log all scheduled meetings
└── End Process