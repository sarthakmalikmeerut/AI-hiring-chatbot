1️⃣ Sync Recruiter Availability
   ├── Fetch recruiter schedules via Google/Microsoft Calendar API
   ├── Store recruiter time slots in a structured database
   └── Move to the next step

2️⃣ Fetch Candidate Availability
   ├── Collect availability via Google Forms / Web Form
   ├── Validate responses and clean the data
   ├── Store availability in a structured format (e.g., Pandas DataFrame, SQL)
   └── Move to the next step

3️⃣ Construct Bipartite Graph
   ├── Define two sets of nodes:
   │     ├── Set 1: Recruiters
   │     ├── Set 2: Candidates
   ├── Create edges based on overlapping time slots
   └── Move to the next step

4️⃣ Apply Bipartite Matching Algorithm
   ├── Use an efficient matching algorithm:
   │     ├── Hungarian Algorithm (if we need an optimal solution)
   │     ├── Hopcroft-Karp Algorithm (for maximum cardinality matching)
   ├── Assign candidates to recruiters
   ├── If all candidates are assigned, move to the next step
   ├── If some candidates are unassigned, return to Step 2 (request new availability)
   └── Move to the next step

5️⃣ Greedy Scheduling for Time Slot Assignment
   ├── Sort available time slots for each recruiter
   ├── Assign the **earliest available slot** to the first matched candidate
   ├── Repeat for all candidates:
   │     ├── If a slot is available, assign it
   │     ├── If no slot is available, reschedule or send rejection email
   └── Move to the next step

6️⃣ Send Calendar Invites
   ├── Generate Google/Outlook Calendar API requests
   ├── Send invites to matched recruiters & candidates
   ├── Notify both parties via email
   ├── Log all scheduled meetings
   └── End Process
1️⃣ Sync Recruiter Availability
   ├── Fetch recruiter schedules via Google/Microsoft Calendar API
   ├── Store recruiter time slots in a structured database
   └── Move to the next step

2️⃣ Fetch Candidate Availability
   ├── Collect availability via Google Forms / Web Form
   ├── Validate responses and clean the data
   ├── Store availability in a structured format (e.g., Pandas DataFrame, SQL)
   └── Move to the next step

3️⃣ Construct Bipartite Graph
   ├── Define two sets of nodes:
   │     ├── Set 1: Recruiters
   │     ├── Set 2: Candidates
   ├── Create edges based on overlapping time slots
   └── Move to the next step

4️⃣ Apply Bipartite Matching Algorithm
   ├── Use an efficient matching algorithm:
   │     ├── Hungarian Algorithm (if we need an optimal solution)
   │     ├── Hopcroft-Karp Algorithm (for maximum cardinality matching)
   ├── Assign candidates to recruiters
   ├── If all candidates are assigned, move to the next step
   ├── If some candidates are unassigned, return to Step 2 (request new availability)
   └── Move to the next step

5️⃣ Greedy Scheduling for Time Slot Assignment
   ├── Sort available time slots for each recruiter
   ├── Assign the **earliest available slot** to the first matched candidate
   ├── Repeat for all candidates:
   │     ├── If a slot is available, assign it
   │     ├── If no slot is available, reschedule or send rejection email
   └── Move to the next step

6️⃣ Send Calendar Invites
   ├── Generate Google/Outlook Calendar API requests
   ├── Send invites to matched recruiters & candidates
   ├── Notify both parties via email
   ├── Log all scheduled meetings
   └── End Process

















4️⃣ Apply Bipartite Matching Algorithm
What to do?

Implement a matching algorithm (Hungarian or Hopcroft-Karp).
Find optimal recruiter-candidate assignments.
Use scipy.optimize.linear_sum_assignment (Hungarian Algorithm) or networkx.algorithms.bipartite.maximum_matching (Hopcroft-Karp).
5️⃣ Greedy Scheduling for Time Slot Assignment
What to do?

Sort time slots for recruiters.
Assign candidates based on the earliest available slot.
Handle conflicts (reschedule, send rejection).
6️⃣ Send Calendar Invites
What to do?

Use Google/Outlook Calendar API to send invites.
Generate and send confirmation emails.